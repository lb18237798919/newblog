"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9019],{6262:(a,i)=>{i.A=(a,i)=>{const e=a.__vccOpts||a;for(const[a,t]of i)e[a]=t;return e}},8082:(a,i,e)=>{e.r(i),e.d(i,{comp:()=>l,data:()=>b});var t=e(641);const c={},l=(0,e(6262).A)(c,[["render",function(a,i){return(0,t.uX)(),(0,t.CE)("div",null,i[0]||(i[0]=[(0,t.Fv)('<h1 id="_01-【版本控制和git的安装介绍】" tabindex="-1"><a class="header-anchor" href="#_01-【版本控制和git的安装介绍】"><span>01 【版本控制和Git的安装介绍】</span></a></h1><p>工程设计领域中，使用“版本控制”管理工程蓝图的设计过程。在 IT 开发中也可以使用版本控制思想管理代码的版本迭代。</p><h2 id="_1-目的" tabindex="-1"><a class="header-anchor" href="#_1-目的"><span>1.目的</span></a></h2><p>协同修改：支持在服务器对同一个文件多人协同地修改； 数据备份：同时保存目录及文件的当前状态与每次提交时的历史状态； 版本管理：不保存版本间的重复数据以节约存储空间；</p><blockquote><p>为此，SVN 和 Git 分别采用增量式管理 和文件系统快照 的方式。</p></blockquote><p>权限控制：对团队协作者进行权限控制（SVN 和 Git 共有）；审核团队外开发者贡献的代码（Git 独有）； 历史记录：查看修改者、修改时间、修改内容、日志信息等项目；将本地文件恢复到某一指定的历史状态； 分支管理：允许开发团队同时优雅地推进多条生产线任务，提高效率。</p><h2 id="_2-工具" tabindex="-1"><a class="header-anchor" href="#_2-工具"><span>2. 工具</span></a></h2><p>版本控制工具是版本控制思想的实现。</p><h3 id="_2-1-集中式版本控制工具" tabindex="-1"><a class="header-anchor" href="#_2-1-集中式版本控制工具"><span>2.1 集中式版本控制工具</span></a></h3><p>如：CVS、SVN、VSS 等。</p><ul><li>仅云端库有版本历史记录，本地库仅有最新的版本；</li><li>无法完全避免单点故障的问题。</li></ul><blockquote><p>单点故障：一个主机连接多个处理节点，主节点负责分发任务，而子节点负责处理业务，当主节点发生故障时，会导致整个系统发故障。</p></blockquote><figure><img src="https://i0.hdslb.com/bfs/album/7b0bdd27704c333af32efeced9bcb98f2ed3b889.png" alt="image-20220827211244519" tabindex="0" loading="lazy"><figcaption>image-20220827211244519</figcaption></figure><figure><img src="https://i0.hdslb.com/bfs/album/0f5f0cd17c6e8a48f0ff991aa7bc64ea0211f6c6.png" alt="image-20220827211204909" tabindex="0" loading="lazy"><figcaption>image-20220827211204909</figcaption></figure><h3 id="_2-2-分布式版本控制工具" tabindex="-1"><a class="header-anchor" href="#_2-2-分布式版本控制工具"><span>2.2 分布式版本控制工具</span></a></h3><p>如：Git、Mercurial、Bazaar、Darcs 等。</p><ul><li>云端库和本地库都会为各个版本历史记录存档；</li><li>从根本上避免了单点故障。</li></ul><figure><img src="https://i0.hdslb.com/bfs/album/9fceda60db8eceea9503ea8b0ff6a35fd0970a97.png" alt="image-20220827211230657" tabindex="0" loading="lazy"><figcaption>image-20220827211230657</figcaption></figure><h2 id="_3-git-简介" tabindex="-1"><a class="header-anchor" href="#_3-git-简介"><span>3.Git 简介</span></a></h2><h3 id="_3-2-git-分布式版本控制系统" tabindex="-1"><a class="header-anchor" href="#_3-2-git-分布式版本控制系统"><span>3.2 Git：分布式版本控制系统</span></a></h3><p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>下图就是分布式版本控制工具管理方式：</p><figure><img src="https://i0.hdslb.com/bfs/album/33e8eb98bed3beea624278acba725b3d6c9889b1.png" alt="image-20221006131925125" tabindex="0" loading="lazy"><figcaption>image-20221006131925125</figcaption></figure><p>仓库（版本库）：相当于一个专门用来存放代码的目录。这个目录里面的所有文件都可以Git管理，每个文件的增删改查都能被Git跟踪到</p><h3 id="_3-2-发展史" tabindex="-1"><a class="header-anchor" href="#_3-2-发展史"><span>3.2 发展史</span></a></h3><figure><img src="https://i0.hdslb.com/bfs/album/f90f771ae3d0f2c874feae9418df19974c4424bf.png" alt="image-20220827211720552" tabindex="0" loading="lazy"><figcaption>image-20220827211720552</figcaption></figure><h3 id="_3-3-优势" tabindex="-1"><a class="header-anchor" href="#_3-3-优势"><span>3.3 优势</span></a></h3><ul><li>大部分操作在本地完成，不需要联网；</li><li>完整性保证；</li><li>尽可能添加数据，而不是删除或修改数据；</li><li>分支操作非常快捷流畅；</li><li>与 Linux 命令全面兼容。</li></ul><h2 id="_4-git-软件的安装" tabindex="-1"><a class="header-anchor" href="#_4-git-软件的安装"><span>4.Git 软件的安装</span></a></h2><p>从 https://git-scm.com/downloads 下载对应操作系统的二进制可执行文件。</p><blockquote><p>直接下一步的过程就不介绍了</p></blockquote><p>1.安装到无空格的英文路径下（这是软件安装过程中的规范，防止因程序的不健壮而引发未知错误）；</p><figure><img src="https://i0.hdslb.com/bfs/album/4e00c1fac6315adf8f38f0d996d4a91d92c8a1b5.png" alt="image-20220827211905363" tabindex="0" loading="lazy"><figcaption>image-20220827211905363</figcaption></figure><p>2.选择需要安装的组件；</p><figure><img src="https://i0.hdslb.com/bfs/album/682ee9b628eae1dd15042730df38fb75cea0a951.png" alt="image-20220827211916721" tabindex="0" loading="lazy"><figcaption>image-20220827211916721</figcaption></figure><p>3.选择 <a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">Visual Studio Code</a> 用于 Git 的默认文本编辑器；</p><figure><img src="https://i0.hdslb.com/bfs/album/c519001a28231c5941aad78f7f4b89bbca08ed1a.png" alt="image-20220827212000737" tabindex="0" loading="lazy"><figcaption>image-20220827212000737</figcaption></figure><p>4.设置在执行<code>git init</code>命令后，由 Git 自行定义新存储库的初始分支名称——<code>master</code>；</p><figure><img src="https://i0.hdslb.com/bfs/album/703320786d402e2f5e32a844b644343d834fd6b4.png" alt="image-20220827212024257" tabindex="0" loading="lazy"><figcaption>image-20220827212024257</figcaption></figure><p>5.设置PATH环境变量——保持默认；</p><figure><img src="https://i0.hdslb.com/bfs/album/01aec4a2ff2caef58f88b6c7fbbd22a4c11fa848.png" alt="image-20220827212111362" tabindex="0" loading="lazy"><figcaption>image-20220827212111362</figcaption></figure><p>6.选用内置的 OpenSSH 作为 SSH 可执行文件；</p><figure><img src="https://i0.hdslb.com/bfs/album/02727881e69d9626d359a0e5b3861cc5ff56e063.png" alt="image-20220827212130586" tabindex="0" loading="lazy"><figcaption>image-20220827212130586</figcaption></figure><p>7.选择 OpenSSL 库作为 HTTPS 传输端；</p><figure><img src="https://i0.hdslb.com/bfs/album/8435ebc111356ab3be7bc4d83e76621befd337ce.png" alt="image-20220827212142376" tabindex="0" loading="lazy"><figcaption>image-20220827212142376</figcaption></figure><p>8.使用默认配置转换文本文件中的行尾；</p><figure><img src="https://i0.hdslb.com/bfs/album/b6a3afb46bc1a7a04d50580c67de349149a30bfd.png" alt="image-20220827212154165" tabindex="0" loading="lazy"><figcaption>image-20220827212154165</figcaption></figure><p>9.使用默认配置，选用 MinTTY 作为 Git Bash 的终端；</p><figure><img src="https://i0.hdslb.com/bfs/album/d20c764070c38076bfd48dcddc3cf07f559b1c4f.png" alt="image-20220827212206242" tabindex="0" loading="lazy"><figcaption>image-20220827212206242</figcaption></figure><p>10.对于执行git pull命令后的行为保持默认；</p><figure><img src="https://i0.hdslb.com/bfs/album/4d6fe391e7919077107073080c80764b2fd67497.png" alt="image-20220827212223848" tabindex="0" loading="lazy"><figcaption>image-20220827212223848</figcaption></figure><p>11.选用默认的授权助手；</p><figure><img src="https://i0.hdslb.com/bfs/album/b434fe096bc937099a157a40e25296232804f0d0.png" alt="image-20220827212233762" tabindex="0" loading="lazy"><figcaption>image-20220827212233762</figcaption></figure><p>12.其他杂项设置；</p><figure><img src="https://i0.hdslb.com/bfs/album/c0b932915cc0d02c04a8ca63de4f179e70829351.png" alt="image-20220827212247326" tabindex="0" loading="lazy"><figcaption>image-20220827212247326</figcaption></figure><p>13.保持对实验性选项的禁用后安装 (Install)；</p><figure><img src="https://i0.hdslb.com/bfs/album/14eb73fb460fd69bd4381c57ccde48daa9c650cd.png" alt="image-20220827212312589" tabindex="0" loading="lazy"><figcaption>image-20220827212312589</figcaption></figure>',57)]))}]]),b=JSON.parse('{"path":"/tool/git/01.html","title":"01 【版本控制和Git的安装介绍】","lang":"zh-CN","frontmatter":{"description":"01 【版本控制和Git的安装介绍】 工程设计领域中，使用“版本控制”管理工程蓝图的设计过程。在 IT 开发中也可以使用版本控制思想管理代码的版本迭代。 1.目的 协同修改：支持在服务器对同一个文件多人协同地修改； 数据备份：同时保存目录及文件的当前状态与每次提交时的历史状态； 版本管理：不保存版本间的重复数据以节约存储空间； 为此，SVN 和 Git...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/newblog/tool/git/01.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"01 【版本控制和Git的安装介绍】"}],["meta",{"property":"og:description","content":"01 【版本控制和Git的安装介绍】 工程设计领域中，使用“版本控制”管理工程蓝图的设计过程。在 IT 开发中也可以使用版本控制思想管理代码的版本迭代。 1.目的 协同修改：支持在服务器对同一个文件多人协同地修改； 数据备份：同时保存目录及文件的当前状态与每次提交时的历史状态； 版本管理：不保存版本间的重复数据以节约存储空间； 为此，SVN 和 Git..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.hdslb.com/bfs/album/7b0bdd27704c333af32efeced9bcb98f2ed3b889.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-02T07:29:48.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-02T07:29:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01 【版本控制和Git的安装介绍】\\",\\"image\\":[\\"https://i0.hdslb.com/bfs/album/7b0bdd27704c333af32efeced9bcb98f2ed3b889.png\\",\\"https://i0.hdslb.com/bfs/album/0f5f0cd17c6e8a48f0ff991aa7bc64ea0211f6c6.png\\",\\"https://i0.hdslb.com/bfs/album/9fceda60db8eceea9503ea8b0ff6a35fd0970a97.png\\",\\"https://i0.hdslb.com/bfs/album/33e8eb98bed3beea624278acba725b3d6c9889b1.png\\",\\"https://i0.hdslb.com/bfs/album/f90f771ae3d0f2c874feae9418df19974c4424bf.png\\",\\"https://i0.hdslb.com/bfs/album/4e00c1fac6315adf8f38f0d996d4a91d92c8a1b5.png\\",\\"https://i0.hdslb.com/bfs/album/682ee9b628eae1dd15042730df38fb75cea0a951.png\\",\\"https://i0.hdslb.com/bfs/album/c519001a28231c5941aad78f7f4b89bbca08ed1a.png\\",\\"https://i0.hdslb.com/bfs/album/703320786d402e2f5e32a844b644343d834fd6b4.png\\",\\"https://i0.hdslb.com/bfs/album/01aec4a2ff2caef58f88b6c7fbbd22a4c11fa848.png\\",\\"https://i0.hdslb.com/bfs/album/02727881e69d9626d359a0e5b3861cc5ff56e063.png\\",\\"https://i0.hdslb.com/bfs/album/8435ebc111356ab3be7bc4d83e76621befd337ce.png\\",\\"https://i0.hdslb.com/bfs/album/b6a3afb46bc1a7a04d50580c67de349149a30bfd.png\\",\\"https://i0.hdslb.com/bfs/album/d20c764070c38076bfd48dcddc3cf07f559b1c4f.png\\",\\"https://i0.hdslb.com/bfs/album/4d6fe391e7919077107073080c80764b2fd67497.png\\",\\"https://i0.hdslb.com/bfs/album/b434fe096bc937099a157a40e25296232804f0d0.png\\",\\"https://i0.hdslb.com/bfs/album/c0b932915cc0d02c04a8ca63de4f179e70829351.png\\",\\"https://i0.hdslb.com/bfs/album/14eb73fb460fd69bd4381c57ccde48daa9c650cd.png\\"],\\"dateModified\\":\\"2024-12-02T07:29:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1.目的","slug":"_1-目的","link":"#_1-目的","children":[]},{"level":2,"title":"2. 工具","slug":"_2-工具","link":"#_2-工具","children":[{"level":3,"title":"2.1 集中式版本控制工具","slug":"_2-1-集中式版本控制工具","link":"#_2-1-集中式版本控制工具","children":[]},{"level":3,"title":"2.2 分布式版本控制工具","slug":"_2-2-分布式版本控制工具","link":"#_2-2-分布式版本控制工具","children":[]}]},{"level":2,"title":"3.Git 简介","slug":"_3-git-简介","link":"#_3-git-简介","children":[{"level":3,"title":"3.2 Git：分布式版本控制系统","slug":"_3-2-git-分布式版本控制系统","link":"#_3-2-git-分布式版本控制系统","children":[]},{"level":3,"title":"3.2 发展史","slug":"_3-2-发展史","link":"#_3-2-发展史","children":[]},{"level":3,"title":"3.3 优势","slug":"_3-3-优势","link":"#_3-3-优势","children":[]}]},{"level":2,"title":"4.Git 软件的安装","slug":"_4-git-软件的安装","link":"#_4-git-软件的安装","children":[]}],"git":{"createdTime":1733124588000,"updatedTime":1733124588000,"contributors":[{"name":"liubin","email":"liubin8919@qq.com","commits":1}]},"readingTime":{"minutes":3.57,"words":1070},"filePathRelative":"tool/git/01.md","localizedDate":"2024年12月2日","excerpt":"\\n<p>工程设计领域中，使用“版本控制”管理工程蓝图的设计过程。在 IT 开发中也可以使用版本控制思想管理代码的版本迭代。</p>\\n<h2>1.目的</h2>\\n<p>协同修改：支持在服务器对同一个文件多人协同地修改；\\n数据备份：同时保存目录及文件的当前状态与每次提交时的历史状态；\\n版本管理：不保存版本间的重复数据以节约存储空间；</p>\\n<blockquote>\\n<p>为此，SVN 和 Git 分别采用增量式管理 和文件系统快照 的方式。</p>\\n</blockquote>\\n<p>权限控制：对团队协作者进行权限控制（SVN 和 Git 共有）；审核团队外开发者贡献的代码（Git 独有）；\\n历史记录：查看修改者、修改时间、修改内容、日志信息等项目；将本地文件恢复到某一指定的历史状态；\\n分支管理：允许开发团队同时优雅地推进多条生产线任务，提高效率。</p>","autoDesc":true}')}}]);