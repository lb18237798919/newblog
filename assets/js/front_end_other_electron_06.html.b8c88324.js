"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7400],{6262:(i,s)=>{s.A=(i,s)=>{const e=i.__vccOpts||i;for(const[i,a]of s)e[i]=a;return e}},8432:(i,s,e)=>{e.r(s),e.d(s,{comp:()=>l,data:()=>t});var a=e(641);const n={},l=(0,e(6262).A)(n,[["render",function(i,s){return(0,a.uX)(),(0,a.CE)("div",null,s[0]||(s[0]=[(0,a.Fv)('<h1 id="_06-【electron对话框】" tabindex="-1"><a class="header-anchor" href="#_06-【electron对话框】"><span>06 【electron对话框】</span></a></h1><blockquote><p>显示用于打开和保存文件、警报等的本机系统对话框</p></blockquote><h2 id="_1-选择文件" tabindex="-1"><a class="header-anchor" href="#_1-选择文件"><span>1.选择文件</span></a></h2><p><code>browserWindow</code> 参数允许该对话框将自身附加到父窗口, 作为父窗口的模态框。</p><p><code>dialog.showOpenDialog([browserWindow, ]options)</code></p><ul><li><code>browserWindow</code> <a href="https://www.electronjs.org/zh/docs/latest/api/browser-window" target="_blank" rel="noopener noreferrer">BrowserWindow</a> (可选)</li><li><code>选项</code> 对象 <ul><li><code>title</code> string (可选) - 对话框窗口的标题</li><li><code>defaultPath</code> string (可选) - 对话框的默认展示路径</li><li><code>buttonLabel</code> string (可选) - 「确认」按钮的自定义标签, 当为空时, 将使用默认标签。</li><li><code>filters</code> [FileFilter<a href="https://www.electronjs.org/zh/docs/latest/api/structures/file-filter" target="_blank" rel="noopener noreferrer">]</a> (可选)</li><li><code>properties</code> string[] (可选) - 包含对话框相关属性。 支持以下属性值: <ul><li><code>openFile</code> - 允许选择文件</li><li><code>openDirectory</code> - 允许选择文件夹</li><li><code>multiSelections</code>-允许多选。</li><li><code>showHiddenFiles</code>-显示对话框中的隐藏文件。</li><li><code>createDirectory</code> <em>macOS</em> -允许你通过对话框的形式创建新的目录。</li><li><code>promptToCreate</code> <em>Windows</em>-如果输入的文件路径在对话框中不存在, 则提示创建。 这并不是真的在路径上创建一个文件，而是允许返回一些不存在的地址交由应用程序去创建。</li><li><code>noResolveAliases</code> <em>macOS</em>-禁用自动的别名路径(符号链接) 解析。 所选别名现在将会返回别名路径而非其目标路径。</li><li><code>treatPackageAsDirectory</code> <em>macOS</em> -将包 (如 <code>.app </code>文件夹) 视为目录而不是文件。</li><li><code>dontAddToRecent</code> <em>Windows</em> - 不要将正在打开的项目添加到最近的文档列表中。</li></ul></li><li><code>message</code> string (可选) <em>macOS</em> -显示在输入框上方的消息。</li><li><code>securityScopedBookmarks</code> boolean (可选) <em>macOS</em> <em>mas</em> - 在打包提交到Mac App Store时创建 <a href="https://developer.apple.com/library/content/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html#//apple_ref/doc/uid/TP40011183-CH3-SW16" target="_blank" rel="noopener noreferrer">security scoped bookmarks</a></li></ul></li></ul><p>返回 <code>Promise&lt;Object&gt;</code> - resolve包含以下内容的object：</p><ul><li><code>canceled</code> boolean - 对话框是否被取消。</li><li><code>filePaths</code> string[] - 用户选择的文件路径的数组. 如果对话框被取消，这将是一个空的数组。</li><li><code>bookmarks</code> string[] (optional) <em>macOS</em> <em>mas</em> - 一个数组， <code>filePaths</code> 数组，base64编码字符串包含安全范围书签数据。 <code>securityScopedBookmarks</code> 必须启用才能捕获数据。 (返回值见 <a href="https://www.electronjs.org/zh/docs/latest/api/dialog#bookmarks-array" target="_blank" rel="noopener noreferrer">这里的表格</a>。)</li></ul><p><code>filters</code> 指定一个文件类型数组，用于规定用户可见或可选的特定类型范围。 例如：</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  filters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Images&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">extensions</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;jpg&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;png&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;gif&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Movies&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">extensions</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;mkv&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;avi&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;mp4&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Custom File Type&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">extensions</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;as&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] },</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">name</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;All Files&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">extensions</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;*&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">] }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>extensions</code> 数组应为没有通配符或点的扩展名 (例如, <code>&quot;png&quot;</code> 是正确的, 而 <code>&quot;.png&quot;</code> 和 <code>*. png &quot;</code> 就是错误的)。 若要显示所有文件, 请使用 <code>&quot;*&quot;</code> 通配符 (不支持其他通配符)。</p><p><strong>注意:</strong> 在 Windows 和 Linux 上, 打开对话框不能同时是文件选择器和目录选择器, 因此如果在这些平台上将 <code>properties</code> 设置为<code>[&quot;openFile&quot;、&quot;openDirectory&quot;]</code>, 则将显示为目录选择器。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">dialog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">showOpenDialog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">mainWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  properties</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;openFile&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;openDirectory&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">result</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">canceled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">filePaths</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">err</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">err</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">BrowserWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">dialog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;electron&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">mainWindow</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">webContents</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;did-finish-load&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  dialog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">showOpenDialog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    buttonLabel</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;select&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    defaultPath</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> app</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;desktop&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    properties</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;multiSelections&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;createDirectory&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;openFile&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;openDirectory&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">    console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">filePaths</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  })</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/466fe6245fdbd2fdac0055fb569804c070093801.png" alt="image-20230112161936191" tabindex="0" loading="lazy"><figcaption>image-20230112161936191</figcaption></figure><p>终端输出：</p><figure><img src="https://i0.hdslb.com/bfs/album/00656f895450ef2bb3f7bbc116612c10bff95dcd.png" alt="image-20230112162109809" tabindex="0" loading="lazy"><figcaption>image-20230112162109809</figcaption></figure><h2 id="_2-保存文件" tabindex="-1"><a class="header-anchor" href="#_2-保存文件"><span>2.保存文件</span></a></h2><p><code>browserWindow</code> 参数允许该对话框将自身附加到父窗口, 作为父窗口的模态框。</p><p><code>dialog.showSaveDialog([browserWindow, ]options)</code></p><ul><li><code>browserWindow</code> <a href="https://www.electronjs.org/zh/docs/latest/api/browser-window" target="_blank" rel="noopener noreferrer">BrowserWindow</a> (可选)</li><li><code>选项</code> 对象 <ul><li><code>title</code> string (可选) - 对话框标题。 无法在一些 <em>Linux</em> 桌面环境中显示。</li><li><code>defaultPath</code> string (可选) - 默认情况下使用的绝对目录路径、绝对文件路径或文件名。</li><li><code>buttonLabel</code> string (可选) - 「确认」按钮的自定义标签, 当为空时, 将使用默认标签。</li><li><code>filters</code> [FileFilter<a href="https://www.electronjs.org/zh/docs/latest/api/structures/file-filter" target="_blank" rel="noopener noreferrer">]</a> (可选)</li><li><code>message</code> string (可选) <em>macOS</em> -显示在对话框上的消息。</li><li><code>nameFieldLabel</code> string (可选) <em>macOS</em> - 文件名输入框对应的自定义标签名。</li><li><code>showsTagField</code> boolean (可选) <em>macOS</em> - 显示标签输入框，默认为 <code>true</code>。</li><li><code>properties</code> string[] (可选) <ul><li><code>showHiddenFiles</code>-显示对话框中的隐藏文件。</li><li><code>createDirectory</code> <em>macOS</em> -允许你通过对话框的形式创建新的目录。</li><li><code>treatPackageAsDirectory</code> <em>macOS</em> -将包 (如 <code>.app </code>文件夹) 视为目录而不是文件。</li><li><code>showOverwriteConfirmation</code> <em>Linux</em> - 设置如果用户输入了已存在的文件名，是否会向用户显示确认对话框。</li><li><code>dontAddToRecent</code> <em>Windows</em> - 不要将正在保存的项目添加到最近的文档列表中。</li></ul></li><li><code>securityScopedBookmarks</code> boolean (可选) <em>macOS</em> <em>mas</em> - 在打包提交到Mac App Store时创建 <a href="https://developer.apple.com/library/content/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html#//apple_ref/doc/uid/TP40011183-CH3-SW16" target="_blank" rel="noopener noreferrer">security scoped bookmarks</a> 当该选项被启用且文件尚不存在时，那么在选定的路径下将创建一个空文件。</li></ul></li></ul><p>返回 <code>Promise&lt;Object&gt;</code> - resolve包含以下内容的object：</p><ul><li><code>canceled</code> boolean - 对话框是否被取消。</li><li><code>filePath</code> string (可选) - 如果对话框被取消，该值为 <code>undefined</code>。</li><li><code>bookmark</code> string(optional) <em>macOS</em> <em>mas</em> - 包含了安全作用域的书签数据 Base64 编码的字符串来保存文件。 <code>securityScopedBookmarks</code> 必须启用才有效。 (返回值见 <a href="https://www.electronjs.org/zh/docs/latest/api/dialog#bookmarks-array" target="_blank" rel="noopener noreferrer">这里的表格</a>。)</li></ul><p><code>filters</code> 可以指定可显示文件的数组类型，详见 <code>dialog.showOpenDialog</code> 事例</p><p><strong>注意：</strong> 在macOS上，建议使用异步版本，以避免展开和折叠对话框时出现问题。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">dialog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">showSaveDialog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">result</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  fs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">writeFileSync</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">result</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">filePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;dselegent&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/dd3456c3ce71f17648e280430b52deceb03e5604.png" alt="image-20230112164112002" tabindex="0" loading="lazy"><figcaption>image-20230112164112002</figcaption></figure><h2 id="_3-消息框" tabindex="-1"><a class="header-anchor" href="#_3-消息框"><span>3.消息框</span></a></h2><p>显示一个消息框</p><p><code>browserWindow</code> 参数允许该对话框将自身附加到父窗口, 作为父窗口的模态框。</p><p><code>dialog.showMessageBox([browserWindow, ]options)</code></p><ul><li><code>browserWindow</code> <a href="https://www.electronjs.org/zh/docs/latest/api/browser-window" target="_blank" rel="noopener noreferrer">BrowserWindow</a> (可选)</li><li><code>选项</code> 对象 <ul><li><code>message</code> string - message box 的内容.</li><li><code>type</code> string (可选) - 可以为 <code>&quot;none&quot;</code>, <code>&quot;info&quot;</code>, <code>&quot;error&quot;</code>, <code>&quot;question&quot;</code> 或者 <code>&quot;warning&quot;</code>. 在 Windows 上, <code>&quot;question&quot;</code> 与<code>&quot;info&quot;</code>显示相同的图标, 除非你使用了 <code>&quot;icon&quot;</code> 选项设置图标。 在 macOS 上, <code>&quot;warning&quot;</code> 和 <code>&quot;error&quot;</code> 显示相同的警告图标</li><li><code>buttons</code> string[] (可选) - 按钮文本数组。 在 Windows上，一个空数组将导致按钮被标为“OK”。</li><li><code>defaultId</code> Integer (可选) - 在 message box 对话框打开的时候，设置默认选中的按钮，值为在 buttons 数组中的索引.</li><li><code>signal</code> AbortSignal (可选) - 通过 <a href="https://nodejs.org/api/globals.html#globals_class_abortsignal" target="_blank" rel="noopener noreferrer">AbortSignal</a> 信号实例可选地关闭消息框，消息框的行为就像用户点击取消一样。 在 macOS, <code>signal</code> 不适用于没有父窗口的消息框。因为平台限制，这些消息框同步运行</li><li><code>title</code> string (可选) - message box 的标题，一些平台不显示.</li><li><code>detail</code> string (可选) - 额外信息.</li><li><code>checkboxLabel</code> string (可选) - 如果使用了，消息框将包含带有给定标签的复选框。</li><li><code>checkboxChecked</code> boolean (可选) - checkbox 的初始值。 默认值为 <code>false</code></li><li><code>icon</code> (<a href="https://www.electronjs.org/zh/docs/latest/api/native-image" target="_blank" rel="noopener noreferrer">NativeImage</a> | string) (可选)</li><li><code>textWidth</code> Integer (可选) <em>macOS</em> - 自定义消息框中文本的宽度</li><li><code>cancelId</code> Integer (可选) - 用于取消对话框的按钮的索引，例如 <code>Esc</code> 键. 默认情况下，它被分配给第一个按钮，文字为 “cancel” 或 “no”。 如果不存在这个标签的按钮，同时该选项又未设置，返回值为<code>0</code>。</li><li><code>noLink</code> boolean (可选) - 在Windows上，应用将尝试找出哪个 <code>buttons</code> 是常用按钮(例如 &quot;Cancel&quot; 或 &quot;Yes&quot;)，然后在对话框中以链接命令的方式展现其它的按钮。 这可以使对话框以现代Windows应用程序的风格显示。 如果你不喜欢这个行为, 你可以设置 <code>noLink</code> 为 <code>true</code>.</li><li><code>normalizeAccessKeys</code> boolean (可选) -规范跨平台的键盘访问键。 默认值为 <code>false</code>. 用 <code>&amp;</code> 连接和转换键盘访问键, 以便它们在每个平台上正常工作.<code>&amp;</code> 字符会在macOS上被删除，在 Linux 上会被转换为 <code>_</code>，在 Windows 上保持不变。 例如 <code>Vie&amp;w</code> 的按钮标签在 Linux 上会被转换为 <code>Vie_w</code>，在 macOS 转换为 <code>View</code> 并且可以被选择。而Windows和Linux上表示 <code>Alt-W</code> 。</li></ul></li></ul><p>返回 <code>Promise&lt;Object&gt;</code> - resolve包含以下属性的promise：</p><ul><li><code>response</code> number - 点击的按钮的索引。</li><li><code>checkboxChecked</code> boolean - 如果设置了 <code>checkboxLabel</code>，返回复选框是否被选中的状态。 否则，返回 <code>false</code>。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> answers</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Yes&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;No&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Maybe&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">dialog</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">showMessageBox</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  title</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Message Box&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  message</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Please select an option&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  detail</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;Message details.&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  buttons</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> answers</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(({</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`User selected: </span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">${</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">answers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span><span style="--shiki-light:#CA1243;--shiki-dark:#C678DD;">}</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://i0.hdslb.com/bfs/album/975f169a851644a7e747fbdf0ca38030089c47d7.png" alt="image-20230112164703446" tabindex="0" loading="lazy"><figcaption>image-20230112164703446</figcaption></figure>',37)]))}]]),t=JSON.parse('{"path":"/front_end/other/electron/06.html","title":"06 【electron对话框】","lang":"zh-CN","frontmatter":{"description":"06 【electron对话框】 显示用于打开和保存文件、警报等的本机系统对话框 1.选择文件 browserWindow 参数允许该对话框将自身附加到父窗口, 作为父窗口的模态框。 dialog.showOpenDialog([browserWindow, ]options) browserWindow BrowserWindow (可选) 选项 对...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/newblog/front_end/other/electron/06.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"06 【electron对话框】"}],["meta",{"property":"og:description","content":"06 【electron对话框】 显示用于打开和保存文件、警报等的本机系统对话框 1.选择文件 browserWindow 参数允许该对话框将自身附加到父窗口, 作为父窗口的模态框。 dialog.showOpenDialog([browserWindow, ]options) browserWindow BrowserWindow (可选) 选项 对..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://i0.hdslb.com/bfs/album/466fe6245fdbd2fdac0055fb569804c070093801.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-02T07:29:48.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-02T07:29:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06 【electron对话框】\\",\\"image\\":[\\"https://i0.hdslb.com/bfs/album/466fe6245fdbd2fdac0055fb569804c070093801.png\\",\\"https://i0.hdslb.com/bfs/album/00656f895450ef2bb3f7bbc116612c10bff95dcd.png\\",\\"https://i0.hdslb.com/bfs/album/dd3456c3ce71f17648e280430b52deceb03e5604.png\\",\\"https://i0.hdslb.com/bfs/album/975f169a851644a7e747fbdf0ca38030089c47d7.png\\"],\\"dateModified\\":\\"2024-12-02T07:29:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1.选择文件","slug":"_1-选择文件","link":"#_1-选择文件","children":[]},{"level":2,"title":"2.保存文件","slug":"_2-保存文件","link":"#_2-保存文件","children":[]},{"level":2,"title":"3.消息框","slug":"_3-消息框","link":"#_3-消息框","children":[]}],"git":{"createdTime":1733124588000,"updatedTime":1733124588000,"contributors":[{"name":"liubin","email":"liubin8919@qq.com","commits":1}]},"readingTime":{"minutes":6.32,"words":1896},"filePathRelative":"front_end/other/electron/06.md","localizedDate":"2024年12月2日","excerpt":"\\n<blockquote>\\n<p>显示用于打开和保存文件、警报等的本机系统对话框</p>\\n</blockquote>\\n<h2>1.选择文件</h2>\\n<p><code>browserWindow</code> 参数允许该对话框将自身附加到父窗口, 作为父窗口的模态框。</p>\\n<p><code>dialog.showOpenDialog([browserWindow, ]options)</code></p>\\n<ul>\\n<li><code>browserWindow</code> <a href=\\"https://www.electronjs.org/zh/docs/latest/api/browser-window\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">BrowserWindow</a> (可选)</li>\\n<li><code>选项</code> 对象\\n<ul>\\n<li><code>title</code> string (可选) - 对话框窗口的标题</li>\\n<li><code>defaultPath</code> string (可选) - 对话框的默认展示路径</li>\\n<li><code>buttonLabel</code> string (可选) - 「确认」按钮的自定义标签, 当为空时, 将使用默认标签。</li>\\n<li><code>filters</code> [FileFilter<a href=\\"https://www.electronjs.org/zh/docs/latest/api/structures/file-filter\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">]</a> (可选)</li>\\n<li><code>properties</code> string[] (可选) - 包含对话框相关属性。 支持以下属性值:\\n<ul>\\n<li><code>openFile</code> - 允许选择文件</li>\\n<li><code>openDirectory</code> - 允许选择文件夹</li>\\n<li><code>multiSelections</code>-允许多选。</li>\\n<li><code>showHiddenFiles</code>-显示对话框中的隐藏文件。</li>\\n<li><code>createDirectory</code> <em>macOS</em> -允许你通过对话框的形式创建新的目录。</li>\\n<li><code>promptToCreate</code> <em>Windows</em>-如果输入的文件路径在对话框中不存在, 则提示创建。 这并不是真的在路径上创建一个文件，而是允许返回一些不存在的地址交由应用程序去创建。</li>\\n<li><code>noResolveAliases</code> <em>macOS</em>-禁用自动的别名路径(符号链接) 解析。 所选别名现在将会返回别名路径而非其目标路径。</li>\\n<li><code>treatPackageAsDirectory</code> <em>macOS</em> -将包 (如 <code>.app </code>文件夹) 视为目录而不是文件。</li>\\n<li><code>dontAddToRecent</code> <em>Windows</em> - 不要将正在打开的项目添加到最近的文档列表中。</li>\\n</ul>\\n</li>\\n<li><code>message</code> string (可选) <em>macOS</em> -显示在输入框上方的消息。</li>\\n<li><code>securityScopedBookmarks</code> boolean (可选) <em>macOS</em> <em>mas</em> - 在打包提交到Mac App Store时创建 <a href=\\"https://developer.apple.com/library/content/documentation/Security/Conceptual/AppSandboxDesignGuide/AppSandboxInDepth/AppSandboxInDepth.html#//apple_ref/doc/uid/TP40011183-CH3-SW16\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">security scoped bookmarks</a></li>\\n</ul>\\n</li>\\n</ul>","autoDesc":true}')}}]);